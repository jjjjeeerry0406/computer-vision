"""
1. 編寫或修改程序以顯示在正確位置旋轉時針和分針的動畫。
2. 本例中，鐘體中心為(0.4, 0.3, 0)，示例代碼中未給出。最初，時針和分針的位置不正確，
它們的旋轉中心分別位於沿 z 軸的 (0.3, 0.1, 0) 和 (-0.5, 0.5, 0) 處。
請將它們的旋轉中心移動到鐘體中心對齊，然後分別旋轉時針和分針製作動畫。
提示：分針的速度比時針快（12 倍）。
3. 創建一個實心圓（純色而不是線條）來表示您的程序以 (0.4, 0.3, 0) 為中心的時鐘主體。
並對齊時鐘上的時針和分針，然後製作動畫。
4. 只需要提交程序（帶有簡短註釋的源代碼）。 Python程序是首選。
並在 2022 年到期之前將數據上傳到 moodle2。10 月 18 日，PM11:55。 
（如有必要，請提前壓縮所有材料）
5. 評分評估：程序能夠顯示沿鐘體中心旋轉的時針和分針（100%）。
"""

import os
import sys
import time
from turtle import position
from tkinter import CENTER
from OpenGL.GL import *
from OpenGL.GLU import *
from OpenGL.GLUT import *
from math import *

# 設定參數
center = (0.4, 0.3, 0)
angle_hr = 0
angle_min = 0
count = 0
PI = 3.14159

VertexList = [[-0.500000,0.123431,0.000000],
                [-0.443431,0.500000,0.000000],
                [-0.556569,0.500000,0.000000],
                [-0.500000,0.556569,0.000000],

                [0.300000,0.050503,0.000000],
                [0.849497,0.100000,0.000000],
                [0.250502,0.100000,0.000000],
                [0.300000,0.149498,0.000000]]

    
def drawhourHand():
    global angle_hr, count
    glColor3f(1,0,0) # red   

    # 根據定點旋轉的矩陣公式: p' = T1(T0*R*inv(T0))*p
    glTranslatef(0.4,0.3,0) 
    glRotatef(angle_hr,0,0,1)  
    glTranslatef(-0.4,-0.3,0) 
    glTranslatef(0.9,-0.2,0) 

    glBegin(GL_TRIANGLES) 
    glVertex3fv(VertexList[1])
    glVertex3fv(VertexList[2])
    glVertex3fv(VertexList[0])
    glVertex3fv(VertexList[1])
    glVertex3fv(VertexList[3])
    glVertex3fv(VertexList[2])
    glEnd()

def drawminuteHand():
    global angle_min
    glColor3f(0,1,0) # green

    # 根據定點旋轉的矩陣公式: p' = T1(T0*R*inv(T0))*p
    glTranslatef(0.4,0.3,0) 
    glRotatef(angle_min,0,0,1)  
    glTranslatef(-0.4,-0.3,0) 
    glTranslatef(0.1,0.2,0) 

    glBegin(GL_TRIANGLES) 
    glVertex3fv(VertexList[5])
    glVertex3fv(VertexList[7])
    glVertex3fv(VertexList[6])
    glVertex3fv(VertexList[4])
    glVertex3fv(VertexList[6])
    glVertex3fv(VertexList[5]) 
    glEnd()

def drawCircle(r, center):
    glColor3f(1,1,1) # white

    # 畫一圈三角形
    glBegin(GL_TRIANGLES)   
    for i in range(60):
        glVertex3f(center[0],center[1],center[2])
        glVertex3f(r*cos(i*6*PI/180.0)+center[0], r*sin(i*6*PI/180.0)+center[1], 0)
        glVertex3f(r*cos((i+1)*6*PI/180.0)+center[0], r*sin((i+1)*6*PI/180.0)+center[1], 0)
    glEnd()

def display():
    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)
    glPushMatrix()   
    drawCircle(0.55, center)
    glPopMatrix()

    glPushMatrix()
    drawminuteHand()  
    glPopMatrix()

    glPushMatrix()
    drawhourHand()
    glPopMatrix()
    glutSwapBuffers()
    
def timerFunc(value):
    global angle_hr, angle_min, count
    glutTimerFunc(10, timerFunc, 0)

    # 分針每10毫秒順時針轉1度
    angle_min = (angle_min-1)%360

    # 分針每120毫秒順時針轉1度
    count += 1
    if count%12 == 0: 
        angle_hr -= 1

    glutPostRedisplay()

def reshape(width,height):
    glViewport(0, 0, width, height)

def keyboard(key, x, y):
    if key == b'\x1b': #ESC
        os._exit(0)


glutInit()
glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA)
glutCreateWindow(b'Homework2')
glutReshapeWindow(600,600)
glutReshapeFunc(reshape)
glutDisplayFunc(display)
glutKeyboardFunc(keyboard)
glutTimerFunc(10, timerFunc, 0) # 每十毫秒呼叫一次時間函數
glutMainLoop()
